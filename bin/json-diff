#!/usr/bin/env node

/*eslint no-console:0*/

const _ = require("underscore");
const fs = require("fs");
const path = require("path");

const leftFileName = process.argv[2];
const rightFileName = process.argv[3];
const uniqueKey = process.argv[4];

if (!leftFileName || !rightFileName || !uniqueKey) {
  console.log(
`usage: ./json-diff FILE_1 FILE_2 KEY_USED_TO_SORT

FILE_1 and FILE_2 are assumed to be sorted using KEY_USED_TO_SORT before the
script is run.

Examples:

    ./diff permissions_withoutMigration.json permissions_withMigration.json route
    ./diff permissions_withoutMigration.txt permissions_withMigration.txt route`);

  process.exit(1);
}

const left = JSON.parse(fs.readFileSync(path.resolve(leftFileName)));
const right = JSON.parse(fs.readFileSync(path.resolve(rightFileName)));
const paddingLength = Math.max(leftFileName.length, rightFileName.length);

function pad(str) {
  const spaces = " ".repeat(paddingLength - str.length);

  return `${str}${spaces}`;
}

const ignore = [
  "_id",
  "createdOn",
  "modifiedOn",
  "__v"
];

function filterKeys(keys) {
  return _.filter(keys, (key) => !_.contains(ignore, key));
}

function checkIfArrayOfObjectIds(array) {
  return !!(_.isArray(array) && array.length && array[0].$oid);
}

function checkDifferentValues(left, right) {
  const leftKeys = filterKeys(_.keys(left));
  const rightKeys = filterKeys(_.keys(right));
  const commonKeys = _.intersection(leftKeys, rightKeys);
  const differences = [];

  _.each(commonKeys, (key) => {
    const leftValue = left[key];
    const rightValue = right[key];
    const isObjectId = !_.isArray(leftValue) && _.isObject(leftValue) && leftValue.$oid;
    const isDate = !_.isArray(leftValue) && _.isObject(leftValue) && leftValue.$date;

    if (_.isObject(leftValue) && !leftValue.$oid) {
      const toDelete = [];

      _.each(leftValue, (value, key) => {
        if (_.isObject(value) && !_.isArray(value) && value.$oid) {
          toDelete.push(key);
        } else if (_.isArray(value) && checkIfArrayOfObjectIds(value)) {
          toDelete.push(key);
        }
      });

      _.each(toDelete, (key) => {
        delete leftValue[key];
        delete rightValue[key];
      });
    }

    // Don't compare the values if they're ObjectIds or dates, since they
    // change between each call to `node make init`.
    if (!isObjectId && !isDate && !_.isEqual(leftValue, rightValue)) {
      differences.push({
        key,
        left: leftValue,
        right: rightValue
      });
    }
  });

  return differences;
}

function checkMissingKeys(left, right) {
  const leftKeys = filterKeys(_.keys(left));
  const rightKeys = filterKeys(_.keys(right));

  const inLeftButNotRight = _.difference(leftKeys, rightKeys);
  const inRightButNotLeft = _.difference(rightKeys, leftKeys);

  return { inLeftButNotRight, inRightButNotLeft };
}

function checkMissingElements(left, right) {
  const leftKeys = _.pluck(left, uniqueKey);
  const rightKeys = _.pluck(right, uniqueKey);
  const inLeftButNotRight = _.map(_.difference(leftKeys, rightKeys), (key) => {
    return _.find(left, (leftObject) => leftObject[uniqueKey] === key);
  });
  const inRightButNotLeft = _.map(_.difference(rightKeys, leftKeys), (key) => {
    return _.find(right, (rightObject) => rightObject[uniqueKey] === key);
  });

  return { inLeftButNotRight, inRightButNotLeft };
}

function diff(left, right) {
  const result = [];

  _.each(left, (leftObject) => {
    const rightObject = _.find(right, (rightObject) => _.isEqual(rightObject[uniqueKey], leftObject[uniqueKey]));

    if (!rightObject) {
      return;
    }

    const ret = {};

    const missingKeys = checkMissingKeys(leftObject, rightObject);

    if (!_.isEmpty(missingKeys.inLeftButNotRight) || !_.isEmpty(missingKeys.inRightButNotLeft)) {
      ret.missingKeys = missingKeys;
    }

    const differentValues = checkDifferentValues(leftObject, rightObject);

    if (!_.isEmpty(differentValues)) {
      ret.differentValues = differentValues;
    }

    if (!_.isEmpty(ret)) {
      result.push(_.extend(ret, { left: leftObject, right: rightObject }));
    }
  });

  return result;
}

const missingElements = checkMissingElements(left, right);

if (missingElements.inLeftButNotRight.length) {
  console.log(`In ${leftFileName} but not ${rightFileName}`);
  console.log();
  console.log(JSON.stringify(missingElements.inLeftButNotRight, null, 2));
  console.log();
}

if (missingElements.inRightButNotLeft.length) {
  console.log(`In ${rightFileName} but not ${leftFileName}`);
  console.log();
  console.log(JSON.stringify(missingElements.inRightButNotLeft, null, 2));
  console.log();
}

const differences = diff(left, right);

if (differences.length) {
  console.log(`Differences between ${leftFileName} and ${rightFileName}`);
  console.log();

  _.each(differences, ({ left, right, differentValues, missingKeys }) => {
    console.log(`Unique Object Id: ${left[uniqueKey]}`);
    console.log();

    if (differentValues) {
      console.log("Difference in values");

      _.each(differentValues, ({ key, left: leftValue, right: rightValue }) => {
        console.log(`${pad("key")}: ${key}`);
        console.log(`${pad(leftFileName)}: ${JSON.stringify(leftValue, null, 2)}`);
        console.log(`${pad(rightFileName)}: ${JSON.stringify(rightValue, null, 2)}`);
        console.log();
      });
    }

    if (missingKeys.inLeftButNotRight.length || missingKeys.inRightButNotLeft.length) {
      console.log("Difference in keys");
      console.log();

      if (missingKeys.inLeftButNotRight.length) {
        console.log(`keys in ${leftFileName} but not in ${rightFileName}`);
        console.log();

        _.each(missingKeys.inLeftButNotRight, (missingKey) => {
          console.log(`${pad("key")}: ${missingKey}`);
          console.log(`${pad(leftFileName)}: ${JSON.stringify(left[missingKey], null, 2)}`);
          console.log(`${pad(rightFileName)}: ${JSON.stringify(right[missingKey], null, 2)}`);
          console.log();
        })
      }

      if (missingKeys.inRightButNotLeft.length) {
        console.log(`keys in ${rightFileName} but not in ${leftFileName}`);
        console.log();

        _.each(missingKeys.inRightButNotLeft, (missingKey) => {
          console.log(`${pad("key")}: ${missingKey}`);
          console.log(`${pad(leftFileName)}: ${JSON.stringify(left[missingKey], null, 2)}`);
          console.log(`${pad(rightFileName)}: ${JSON.stringify(right[missingKey], null, 2)}`);
          console.log();
        })
      }
    }
  });
}
